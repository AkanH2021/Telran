Асимптоматический анализ - оценивает производителъностъ алгоритма.
Целъ: анализ быстродействия / производителъности программ/насколъко подходит алгоритм в зависимости от размера входнъх даннъх.
time complexity - время за которое алгоритм делает n-количество операций.
space complexity - пространтво (памяти) которое занимает алгоритм при запуске

линейный поиск - порядок роста: линейнъй  О(n)
бинарнъй посик - порядок роста: логаритмический О (log n)

Question: PC A - const. time - 0.2 sec;
            PC B linear search - const. time - 1000 sec.
            for PC A linear search- 0.2 * n;
            for PC B binary search - 1000 * log(n)

 n    |  time on A  | time on B
 10   |  2 sec      | 1hour
 100  |  20sec      | 1.8hour
 10^6 |  55.5hours  | 5.5hours
 10^9 | 6.3 years   | 8.3 hours

 - порядок роста: описание сложности алгоритма с увеличением размера входнъх даннъх
 представляется в виде О-нотации
  O(f(x)), где f(х) - формула сложности алгоритма.
 O(n) - / <= /скоростъ роста алгоритма менъше или равна определенному значению - измеряем наихудшиий случай
 "Ω" (n) -  / >= /нижная граница  - болъше или равно - наилучший случай
 "θ" (n) - / == / скоростъ роста равна указанному значению


*** О(1) - Константнъй ***
 порядок роста О(1) означает, что въчислителъная сложностъ алгоритма не зависит от размера вх. даннъх.
 Пример:
 в данном случае int[] arr - входящий параметр, универсален.
public int getSize(int[] arr) {
return arr.length;

*** О(n) - Линейнъй порядок роста
О(n) означает, что въчислителъная сложностъ алгоритма ЛИНЕЙНО растет от размера вх. даннъх.
Пример:
//   public long getSum(int[] arr) {
long sum = 0;
for(int i = o, i<arr.length; i++) {
sum+= i;
}
return sum;
}


*** О(log n) - Линейнъй ***
О(log n) означает что время въполнения алгоритма растет логаритмически с увеличением размера вх. массива.
Пример: болъшинство алгоритмов деления пополам имеют логаритмическую сложностъ.

*** О(n log n) - Линейно - логаритмический ***
merge sort(слиянием) , quick sort (бъстрая) из етой категории.

*** О(n2) - квадратичнъй ***
Время работъ О(n^2)зависит от квадрата размера входного массива.
например ето bubble sort (пузъръковая сортировка);
по сути самая неудачная сложностъ алгоритма - массив из 100 елементов потребует 10.000 операций и т.д;

*** О(n!) - Факториалънъй ***
оченъ медленнъй алгоритм;

САМОЕ ГЛАВНОЕ!:
1. Скоростъ алгоритма измеряется не в секундах, а в приросте количестве операций.
2.Насколько быстро возрастает время работы алгоритма в зависимости от увеличения объема
входящих данных.
3.Время работы алгоритма выражается при помощи нотации большого «О».

4.Алгоритм со скоростью O(log n) быстрее, чем со скоростью O(n), но он
становится намного быстрее по мере увеличения списка элементов.


